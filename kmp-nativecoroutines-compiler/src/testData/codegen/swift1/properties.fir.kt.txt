// FILE: properties.kt

@NativeCoroutines
val topLevelFlow: Flow<String>
  field = flowOf<String>(value = "OK1")
  get

@NativeCoroutines
val topLevelSharedFlow: SharedFlow<String>
  field = apply<MutableSharedFlow<String>>(/* <this> = MutableSharedFlow<String>(replay = 1), */ block = local fun MutableSharedFlow<String>.<anonymous>() {
    $this$apply.tryEmit(value = "OK2") /*~> Unit */
  }
)
  get

@NativeCoroutines
val topLevelStateFlow: StateFlow<String>
  field = MutableStateFlow<String>(value = "OK3")
  get

@NativeCoroutines
val topLevelMutableStateFlow: MutableStateFlow<String>
  field = MutableStateFlow<String>(value = "OK4")
  get

@NativeCoroutines
val nullableFlowValue: Flow<String?>
  field = flowOf<String?>(value = null)
  get

@NativeCoroutines
val nullableSharedFlowValue: SharedFlow<String?>
  field = apply<MutableSharedFlow<String?>>(/* <this> = MutableSharedFlow<String?>(replay = 1), */ block = local fun MutableSharedFlow<String?>.<anonymous>() {
    $this$apply.tryEmit(value = null) /*~> Unit */
  }
)
  get

@NativeCoroutines
val nullableStateFlowValue: StateFlow<String?>
  field = MutableStateFlow<String?>(value = null)
  get

@NativeCoroutinesState
val stateProperty: StateFlow<String>
  field = MutableStateFlow<String>(value = "OK23")
  get

@NativeCoroutinesState
val mutableStateProperty: MutableStateFlow<String>
  field = MutableStateFlow<String>(value = "OK24")
  get

@NativeCoroutinesRefined
val refinedFlow: Flow<String>
  field = flowOf<String>(value = "OK25")
  get

@NativeCoroutinesRefinedState
val refinedState: StateFlow<String>
  field = MutableStateFlow<String>(value = "OK26")
  get

@NativeCoroutinesState
val mutableNullableStateProperty: MutableStateFlow<String>?
  field = MutableStateFlow<String>(value = "OK27")
  get

class MyClass28 : MyInterface28 {
  @NativeCoroutines
  override val interfaceFlowValue: Flow<String>
    field = flowOf<String>(value = "OK28")
    override get

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

class MyFlow29<T1 : Any?, T2 : Any?> : Flow<T2?> {
  private /* final field */ val $$delegate_0: Flow<T2?> = flowOf<T2?>(value = null)
  constructor(value1: T1, value2: T2) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  override suspend fun collect(collector: FlowCollector<T2?>) {
    <this>.#$$delegate_0.collect(collector = collector)
  }

}

data class MyGenericClass1<T : Any?> {
  val value: T
    field = value
    get

  constructor(value: T) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  operator fun component1(): T {
    return <this>.#value
  }

  fun copy(value: T = <this>.#value): MyGenericClass1<T> {
    return MyGenericClass1<T>(value = value)
  }

  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is MyGenericClass1<T> -> return false
    }
    val tmp_0: MyGenericClass1<T> = other /*as MyGenericClass1<T> */
    when {
      EQEQ(arg0 = <this>.#value, arg1 = tmp_0.#value).not() -> return false
    }
    return true
  }

  override fun hashCode(): Int {
    return when {
      EQEQ(arg0 = <this>.#value, arg1 = null) -> 0
      else -> <this>.#value.hashCode()
    }
  }

  override fun toString(): String {
    return "MyGenericClass1(" + "value=" + <this>.#value + ")"
  }

}

class MyGenericClass2<T : Any?> {
  private val value: T
    field = value
    private get

  @NativeCoroutines
  val genericFlow: Flow<T>
    field = flowOf<T>(value = <this>.<get-value>())
    get

  @NativeCoroutines
  val genericSharedFlow: SharedFlow<T>
    field = apply<MutableSharedFlow<T>>(/* <this> = MutableSharedFlow<T>(replay = 1), */ block = local fun MutableSharedFlow<T>.<anonymous>() {
      $this$apply.tryEmit(value = <this>.<get-value>()) /*~> Unit */
    }
)
    get

  @NativeCoroutines
  val genericStateFlow: StateFlow<T>
    field = MutableStateFlow<T>(value = <this>.<get-value>())
    get

  constructor(value: T) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  @ObjCName(name = "genericFlow")
  val genericFlowNative: Flow<T>
    get(): Flow<T> {
      val tmp_1: CoroutineScope? = null
      return <this>.<get-genericFlow>()
    }

  @ObjCName(name = "genericSharedFlow")
  val genericSharedFlowNative: SharedFlow<T>
    get(): SharedFlow<T> {
      val tmp_2: CoroutineScope? = null
      return <this>.<get-genericSharedFlow>()
    }

  val genericSharedFlowReplayCache: List<T>
    get(): List<T> {
      val tmp_3: SharedFlow<T> = <this>.<get-genericSharedFlow>()
      return tmp_3.<get-replayCache>()
    }

  @ObjCName(name = "genericStateFlow")
  val genericStateFlowNative: StateFlow<T>
    get(): StateFlow<T> {
      val tmp_4: CoroutineScope? = null
      return <this>.<get-genericStateFlow>()
    }

  val genericStateFlowValue: T
    get(): T {
      val tmp_5: StateFlow<T> = <this>.<get-genericStateFlow>()
      return tmp_5.<get-value>()
    }

}

interface MyInterface28 {
  @ObjCName(name = "interfaceFlowValue")
  val interfaceFlowValueNative: Flow<String>
    get(): Flow<String> {
      val tmp_6: CoroutineScope? = null
      return <this>.<get-interfaceFlowValue>()
    }

  @NativeCoroutines
  abstract val interfaceFlowValue: Flow<String>
    abstract get

}

fun box(): String {
  return runBoxTest(action = local suspend fun BoxTest.<anonymous>() {
    $this$runBoxTest.collect<String>(flow = <get-topLevelFlowNative>())
    $this$runBoxTest.collect<String>(flow = <get-topLevelSharedFlowNative>(), maxValues = 1)
    $this$runBoxTest.values<String>(values = <get-topLevelSharedFlowReplayCache>())
    $this$runBoxTest.collect<String>(flow = <get-topLevelStateFlowNative>(), maxValues = 1)
    $this$runBoxTest.value<String>(value = <get-topLevelStateFlowValue>())
    $this$runBoxTest.collect<String>(flow = <get-topLevelMutableStateFlowNative>(), maxValues = 1)
    $this$runBoxTest.value<String>(value = <get-topLevelMutableStateFlowValue>())
    $this$runBoxTest.collect<String?>(flow = <get-nullableFlowValueNative>())
    $this$runBoxTest.collect<String?>(flow = <get-nullableSharedFlowValueNative>(), maxValues = 1)
    $this$runBoxTest.values<String?>(values = <get-nullableSharedFlowValueReplayCache>())
    $this$runBoxTest.collect<String?>(flow = <get-nullableStateFlowValueNative>(), maxValues = 1)
    $this$runBoxTest.value<String?>(value = <get-nullableStateFlowValueValue>())
    $this$runBoxTest.value<Flow<String>?>(value = <get-nullableFlowNative>())
    $this$runBoxTest.value<SharedFlow<String>?>(value = <get-nullableSharedFlowNative>())
    $this$runBoxTest.value<List<String>?>(value = <get-nullableSharedFlowReplayCache>())
    $this$runBoxTest.value<StateFlow<String>?>(value = <get-nullableStateFlowPropertyNative>())
    $this$runBoxTest.value<String?>(value = <get-nullableStateFlowPropertyValue>())
    $this$runBoxTest.value<Flow<String?>?>(value = <get-nullableFlowAndValueNative>())
    $this$runBoxTest.value<SharedFlow<String?>?>(value = <get-nullableSharedFlowAndValueNative>())
    $this$runBoxTest.value<List<String?>?>(value = <get-nullableSharedFlowAndValueReplayCache>())
    $this$runBoxTest.value<StateFlow<String?>?>(value = <get-nullableStateFlowAndValueNative>())
    $this$runBoxTest.value<String?>(value = <get-nullableStateFlowAndValueValue>())
    $this$runBoxTest.collect<String>(flow = <get-genericFlowNative><String>(/* <this> = MyGenericClass1<String>(value = "OK14") */))
    $this$runBoxTest.collect<String>(flow = <get-genericSharedFlowNative><String>(/* <this> = MyGenericClass1<String>(value = "OK15") */), maxValues = 1)
    $this$runBoxTest.values<String>(values = <get-genericSharedFlowReplayCache><String>(/* <this> = MyGenericClass1<String>(value = "OK15") */))
    $this$runBoxTest.collect<String>(flow = <get-genericStateFlowNative><String>(/* <this> = MyGenericClass1<String>(value = "OK16") */), maxValues = 1)
    $this$runBoxTest.value<String>(value = <get-genericStateFlowValue><String>(/* <this> = MyGenericClass1<String>(value = "OK16") */))
    $this$runBoxTest.collect<String>(flow = MyGenericClass2<String>(value = "OK17").<get-genericFlowNative>())
    $this$runBoxTest.collect<String>(flow = MyGenericClass2<String>(value = "OK18").<get-genericSharedFlowNative>(), maxValues = 1)
    $this$runBoxTest.values<String>(values = MyGenericClass2<String>(value = "OK18").<get-genericSharedFlowReplayCache>())
    $this$runBoxTest.collect<String>(flow = MyGenericClass2<String>(value = "OK19").<get-genericStateFlowNative>(), maxValues = 1)
    $this$runBoxTest.value<String>(value = MyGenericClass2<String>(value = "OK19").<get-genericStateFlowValue>())
    $this$runBoxTest.collect<String>(flow = <get-extensionFlowNative>(/* <this> = "OK20" */))
    $this$runBoxTest.collect<String>(flow = <get-extensionSharedFlowNative>(/* <this> = "OK21" */), maxValues = 1)
    $this$runBoxTest.values<String>(values = <get-extensionSharedFlowReplayCache>(/* <this> = "OK21" */))
    $this$runBoxTest.collect<String>(flow = <get-extensionStateFlowNative>(/* <this> = "OK22" */), maxValues = 1)
    $this$runBoxTest.value<String>(value = <get-extensionStateFlowValue>(/* <this> = "OK22" */))
    $this$runBoxTest.value<String>(value = <get-statePropertyValue>())
    $this$runBoxTest.collect<String>(flow = <get-statePropertyFlow>(), maxValues = 1)
    $this$runBoxTest.value<String>(value = <get-mutableStatePropertyValue>())
    $this$runBoxTest.collect<String>(flow = <get-mutableStatePropertyFlow>(), maxValues = 1)
    $this$runBoxTest.collect<String>(flow = <get-refinedFlowNative>())
    $this$runBoxTest.value<String>(value = <get-refinedStateValue>())
    $this$runBoxTest.collect<String>(flow = <get-refinedStateFlow>(), maxValues = 1)
    $this$runBoxTest.value<String?>(value = <get-mutableNullableStatePropertyValue>())
    $this$runBoxTest.collect<String>(flow = CHECK_NOT_NULL<MutableStateFlow<String>>(arg0 = <get-mutableNullableStatePropertyFlow>()), maxValues = 1)
    $this$runBoxTest.collect<String>(flow = MyClass28().<get-interfaceFlowValueNative>())
    $this$runBoxTest.collect<String?>(flow = <get-customFlowValueNative>())
  }
)
}

@NativeCoroutines
val customFlowValue: MyFlow29<Int, String>
  get(): MyFlow29<Int, String> {
    return MyFlow29<Int, String>(value1 = 29, value2 = "OK29")
  }

@NativeCoroutines
val String.extensionFlow: Flow<String>
  get(): Flow<String> {
    return flowOf<String>(value = <this>)
  }

@NativeCoroutines
val String.extensionSharedFlow: SharedFlow<String>
  get(): SharedFlow<String> {
    return apply<MutableSharedFlow<String>>(/* <this> = MutableSharedFlow<String>(replay = 1), */ block = local fun MutableSharedFlow<String>.<anonymous>() {
      $this$apply.tryEmit(value = <this>) /*~> Unit */
    }
)
  }

@NativeCoroutines
val String.extensionStateFlow: StateFlow<String>
  get(): StateFlow<String> {
    return MutableStateFlow<String>(value = <this>)
  }

@NativeCoroutines
val <T : Any?> MyGenericClass1<T>.genericFlow: Flow<T>
  get(): Flow<T> {
    return flowOf<T>(value = <this>.<get-value>())
  }

@NativeCoroutines
val <T : Any?> MyGenericClass1<T>.genericSharedFlow: SharedFlow<T>
  get(): SharedFlow<T> {
    return apply<MutableSharedFlow<T>>(/* <this> = MutableSharedFlow<T>(replay = 1), */ block = local fun MutableSharedFlow<T>.<anonymous>() {
      $this$apply.tryEmit(value = <this>.<get-value>()) /*~> Unit */
    }
)
  }

@NativeCoroutines
val <T : Any?> MyGenericClass1<T>.genericStateFlow: StateFlow<T>
  get(): StateFlow<T> {
    return MutableStateFlow<T>(value = <this>.<get-value>())
  }

@NativeCoroutines
val nullableFlow: Flow<String>?
  get(): Flow<String>? {
    return null
  }

@NativeCoroutines
val nullableFlowAndValue: Flow<String?>?
  get(): Flow<String?>? {
    return null
  }

@NativeCoroutines
val nullableSharedFlow: SharedFlow<String>?
  get(): SharedFlow<String>? {
    return null
  }

@NativeCoroutines
val nullableSharedFlowAndValue: SharedFlow<String?>?
  get(): SharedFlow<String?>? {
    return null
  }

@NativeCoroutines
val nullableStateFlowAndValue: StateFlow<String?>?
  get(): StateFlow<String?>? {
    return null
  }

@NativeCoroutines
val nullableStateFlowProperty: StateFlow<String>?
  get(): StateFlow<String>? {
    return null
  }

// FILE: __GENERATED DECLARATIONS__.kt

var topLevelMutableStateFlowValue: String
  get(): String {
    val tmp_0: MutableStateFlow<String> = <get-topLevelMutableStateFlow>()
    return tmp_0.<get-value>()
  }
  set(value: String) {
    return <get-topLevelMutableStateFlow>().<set-value>(<set-?> = value)
  }

@ObjCName(name = "mutableStateProperty")
var mutableStatePropertyValue: String
  get(): String {
    val tmp_1: MutableStateFlow<String> = <get-mutableStateProperty>()
    return tmp_1.<get-value>()
  }
  set(value: String) {
    return <get-mutableStateProperty>().<set-value>(<set-?> = value)
  }

@ObjCName(name = "customFlowValue")
val customFlowValueNative: MyFlow29<Int, String>
  get(): MyFlow29<Int, String> {
    val tmp_2: CoroutineScope? = null
    return <get-customFlowValue>()
  }

@ObjCName(name = "extensionFlow")
val String.extensionFlowNative: Flow<String>
  get(): Flow<String> {
    val tmp_3: CoroutineScope? = null
    return <get-extensionFlow>(/* <this> = <this> */)
  }

@ObjCName(name = "extensionSharedFlow")
val String.extensionSharedFlowNative: SharedFlow<String>
  get(): SharedFlow<String> {
    val tmp_4: CoroutineScope? = null
    return <get-extensionSharedFlow>(/* <this> = <this> */)
  }

val String.extensionSharedFlowReplayCache: List<String>
  get(): List<String> {
    val tmp_5: SharedFlow<String> = <get-extensionSharedFlow>(/* <this> = <this> */)
    return tmp_5.<get-replayCache>()
  }

@ObjCName(name = "extensionStateFlow")
val String.extensionStateFlowNative: StateFlow<String>
  get(): StateFlow<String> {
    val tmp_6: CoroutineScope? = null
    return <get-extensionStateFlow>(/* <this> = <this> */)
  }

val String.extensionStateFlowValue: String
  get(): String {
    val tmp_7: StateFlow<String> = <get-extensionStateFlow>(/* <this> = <this> */)
    return tmp_7.<get-value>()
  }

@ObjCName(name = "genericFlow")
val <T : Any?> MyGenericClass1<T>.genericFlowNative: Flow<T>
  get(): Flow<T> {
    val tmp_8: CoroutineScope? = null
    return <get-genericFlow><T>(/* <this> = <this> */)
  }

@ObjCName(name = "genericSharedFlow")
val <T : Any?> MyGenericClass1<T>.genericSharedFlowNative: SharedFlow<T>
  get(): SharedFlow<T> {
    val tmp_9: CoroutineScope? = null
    return <get-genericSharedFlow><T>(/* <this> = <this> */)
  }

val <T : Any?> MyGenericClass1<T>.genericSharedFlowReplayCache: List<T>
  get(): List<T> {
    val tmp_10: SharedFlow<T> = <get-genericSharedFlow><T>(/* <this> = <this> */)
    return tmp_10.<get-replayCache>()
  }

@ObjCName(name = "genericStateFlow")
val <T : Any?> MyGenericClass1<T>.genericStateFlowNative: StateFlow<T>
  get(): StateFlow<T> {
    val tmp_11: CoroutineScope? = null
    return <get-genericStateFlow><T>(/* <this> = <this> */)
  }

val <T : Any?> MyGenericClass1<T>.genericStateFlowValue: T
  get(): T {
    val tmp_12: StateFlow<T> = <get-genericStateFlow><T>(/* <this> = <this> */)
    return tmp_12.<get-value>()
  }

val mutableNullableStatePropertyFlow: MutableStateFlow<String>?
  get(): MutableStateFlow<String>? {
    val tmp_13: CoroutineScope? = null
    return <get-mutableNullableStateProperty>()
  }

@ObjCName(name = "mutableNullableStateProperty")
val mutableNullableStatePropertyValue: String?
  get(): String? {
    val tmp_14: MutableStateFlow<String>? = <get-mutableNullableStateProperty>()
    return when {
      EQEQ(arg0 = tmp_14, arg1 = null) -> null
      else -> tmp_14.<get-value>()
    }
  }

val mutableStatePropertyFlow: MutableStateFlow<String>
  get(): MutableStateFlow<String> {
    val tmp_15: CoroutineScope? = null
    return <get-mutableStateProperty>()
  }

@ObjCName(name = "nullableFlowAndValue")
val nullableFlowAndValueNative: Flow<String?>?
  get(): Flow<String?>? {
    val tmp_16: CoroutineScope? = null
    return <get-nullableFlowAndValue>()
  }

@ObjCName(name = "nullableFlow")
val nullableFlowNative: Flow<String>?
  get(): Flow<String>? {
    val tmp_17: CoroutineScope? = null
    return <get-nullableFlow>()
  }

@ObjCName(name = "nullableFlowValue")
val nullableFlowValueNative: Flow<String?>
  get(): Flow<String?> {
    val tmp_18: CoroutineScope? = null
    return <get-nullableFlowValue>()
  }

@ObjCName(name = "nullableSharedFlowAndValue")
val nullableSharedFlowAndValueNative: SharedFlow<String?>?
  get(): SharedFlow<String?>? {
    val tmp_19: CoroutineScope? = null
    return <get-nullableSharedFlowAndValue>()
  }

val nullableSharedFlowAndValueReplayCache: List<String?>?
  get(): List<String?>? {
    val tmp_20: SharedFlow<String?>? = <get-nullableSharedFlowAndValue>()
    return when {
      EQEQ(arg0 = tmp_20, arg1 = null) -> null
      else -> tmp_20.<get-replayCache>()
    }
  }

@ObjCName(name = "nullableSharedFlow")
val nullableSharedFlowNative: SharedFlow<String>?
  get(): SharedFlow<String>? {
    val tmp_21: CoroutineScope? = null
    return <get-nullableSharedFlow>()
  }

val nullableSharedFlowReplayCache: List<String>?
  get(): List<String>? {
    val tmp_22: SharedFlow<String>? = <get-nullableSharedFlow>()
    return when {
      EQEQ(arg0 = tmp_22, arg1 = null) -> null
      else -> tmp_22.<get-replayCache>()
    }
  }

@ObjCName(name = "nullableSharedFlowValue")
val nullableSharedFlowValueNative: SharedFlow<String?>
  get(): SharedFlow<String?> {
    val tmp_23: CoroutineScope? = null
    return <get-nullableSharedFlowValue>()
  }

val nullableSharedFlowValueReplayCache: List<String?>
  get(): List<String?> {
    val tmp_24: SharedFlow<String?> = <get-nullableSharedFlowValue>()
    return tmp_24.<get-replayCache>()
  }

@ObjCName(name = "nullableStateFlowAndValue")
val nullableStateFlowAndValueNative: StateFlow<String?>?
  get(): StateFlow<String?>? {
    val tmp_25: CoroutineScope? = null
    return <get-nullableStateFlowAndValue>()
  }

val nullableStateFlowAndValueValue: String?
  get(): String? {
    val tmp_26: StateFlow<String?>? = <get-nullableStateFlowAndValue>()
    return when {
      EQEQ(arg0 = tmp_26, arg1 = null) -> null
      else -> tmp_26.<get-value>()
    }
  }

@ObjCName(name = "nullableStateFlowProperty")
val nullableStateFlowPropertyNative: StateFlow<String>?
  get(): StateFlow<String>? {
    val tmp_27: CoroutineScope? = null
    return <get-nullableStateFlowProperty>()
  }

val nullableStateFlowPropertyValue: String?
  get(): String? {
    val tmp_28: StateFlow<String>? = <get-nullableStateFlowProperty>()
    return when {
      EQEQ(arg0 = tmp_28, arg1 = null) -> null
      else -> tmp_28.<get-value>()
    }
  }

@ObjCName(name = "nullableStateFlowValue")
val nullableStateFlowValueNative: StateFlow<String?>
  get(): StateFlow<String?> {
    val tmp_29: CoroutineScope? = null
    return <get-nullableStateFlowValue>()
  }

val nullableStateFlowValueValue: String?
  get(): String? {
    val tmp_30: StateFlow<String?> = <get-nullableStateFlowValue>()
    return tmp_30.<get-value>()
  }

@ObjCName(name = "refinedFlow")
@ShouldRefineInSwift
val refinedFlowNative: Flow<String>
  get(): Flow<String> {
    val tmp_31: CoroutineScope? = null
    return <get-refinedFlow>()
  }

@ShouldRefineInSwift
val refinedStateFlow: StateFlow<String>
  get(): StateFlow<String> {
    val tmp_32: CoroutineScope? = null
    return <get-refinedState>()
  }

@ObjCName(name = "refinedState")
@ShouldRefineInSwift
val refinedStateValue: String
  get(): String {
    val tmp_33: StateFlow<String> = <get-refinedState>()
    return tmp_33.<get-value>()
  }

val statePropertyFlow: StateFlow<String>
  get(): StateFlow<String> {
    val tmp_34: CoroutineScope? = null
    return <get-stateProperty>()
  }

@ObjCName(name = "stateProperty")
val statePropertyValue: String
  get(): String {
    val tmp_35: StateFlow<String> = <get-stateProperty>()
    return tmp_35.<get-value>()
  }

@ObjCName(name = "topLevelFlow")
val topLevelFlowNative: Flow<String>
  get(): Flow<String> {
    val tmp_36: CoroutineScope? = null
    return <get-topLevelFlow>()
  }

@ObjCName(name = "topLevelMutableStateFlow")
val topLevelMutableStateFlowNative: MutableStateFlow<String>
  get(): MutableStateFlow<String> {
    val tmp_37: CoroutineScope? = null
    return <get-topLevelMutableStateFlow>()
  }

@ObjCName(name = "topLevelSharedFlow")
val topLevelSharedFlowNative: SharedFlow<String>
  get(): SharedFlow<String> {
    val tmp_38: CoroutineScope? = null
    return <get-topLevelSharedFlow>()
  }

val topLevelSharedFlowReplayCache: List<String>
  get(): List<String> {
    val tmp_39: SharedFlow<String> = <get-topLevelSharedFlow>()
    return tmp_39.<get-replayCache>()
  }

@ObjCName(name = "topLevelStateFlow")
val topLevelStateFlowNative: StateFlow<String>
  get(): StateFlow<String> {
    val tmp_40: CoroutineScope? = null
    return <get-topLevelStateFlow>()
  }

val topLevelStateFlowValue: String
  get(): String {
    val tmp_41: StateFlow<String> = <get-topLevelStateFlow>()
    return tmp_41.<get-value>()
  }
