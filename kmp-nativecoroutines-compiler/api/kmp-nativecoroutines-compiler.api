public final class com/rickclephas/kmp/nativecoroutines/compiler/KmpNativeCoroutinesCommandLineProcessor : org/jetbrains/kotlin/compiler/plugin/CommandLineProcessor {
	public fun <init> ()V
	public fun getPluginId ()Ljava/lang/String;
	public fun getPluginOptions ()Ljava/util/Collection;
	public fun processOption (Lorg/jetbrains/kotlin/compiler/plugin/AbstractCliOption;Ljava/lang/String;Lorg/jetbrains/kotlin/config/CompilerConfiguration;)V
}

public final class com/rickclephas/kmp/nativecoroutines/compiler/KmpNativeCoroutinesCompilerPluginRegistrar : org/jetbrains/kotlin/compiler/plugin/CompilerPluginRegistrar {
	public fun <init> ()V
	public fun getSupportsK2 ()Z
	public fun registerExtensions (Lorg/jetbrains/kotlin/compiler/plugin/CompilerPluginRegistrar$ExtensionStorage;Lorg/jetbrains/kotlin/config/CompilerConfiguration;)V
}

public final class com/rickclephas/kmp/nativecoroutines/compiler/classic/diagnostics/KmpNativeCoroutinesChecker : org/jetbrains/kotlin/resolve/checkers/DeclarationChecker {
	public fun <init> (Lcom/rickclephas/kmp/nativecoroutines/compiler/config/ExposedSeverity;Ljava/util/List;Z)V
	public fun check (Lorg/jetbrains/kotlin/psi/KtDeclaration;Lorg/jetbrains/kotlin/descriptors/DeclarationDescriptor;Lorg/jetbrains/kotlin/resolve/checkers/DeclarationCheckerContext;)V
}

public final class com/rickclephas/kmp/nativecoroutines/compiler/classic/diagnostics/KmpNativeCoroutinesErrors {
	public static final field CONFLICT_COROUTINES Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field EXPOSED_FLOW_TYPE Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field EXPOSED_FLOW_TYPE_ERROR Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field EXPOSED_STATE_FLOW_PROPERTY Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field EXPOSED_STATE_FLOW_PROPERTY_ERROR Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field EXPOSED_SUSPEND_FUNCTION Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field EXPOSED_SUSPEND_FUNCTION_ERROR Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field IGNORED_COROUTINES Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field IGNORED_COROUTINES_REFINED Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field IGNORED_COROUTINES_REFINED_STATE Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field IGNORED_COROUTINES_STATE Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field IMPLICIT_RETURN_TYPE Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field INCOMPATIBLE_ACTUAL_COROUTINES Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field INCOMPATIBLE_ACTUAL_COROUTINES_IGNORE Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field INCOMPATIBLE_ACTUAL_COROUTINES_REFINED Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field INCOMPATIBLE_ACTUAL_COROUTINES_REFINED_STATE Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field INCOMPATIBLE_ACTUAL_COROUTINES_STATE Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field INCOMPATIBLE_OVERRIDE_COROUTINES Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field INCOMPATIBLE_OVERRIDE_COROUTINES_IGNORE Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field INCOMPATIBLE_OVERRIDE_COROUTINES_REFINED Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field INCOMPATIBLE_OVERRIDE_COROUTINES_REFINED_STATE Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field INCOMPATIBLE_OVERRIDE_COROUTINES_STATE Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field INSTANCE Lcom/rickclephas/kmp/nativecoroutines/compiler/classic/diagnostics/KmpNativeCoroutinesErrors;
	public static final field INVALID_COROUTINES Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field INVALID_COROUTINES_IGNORE Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field INVALID_COROUTINES_REFINED Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field INVALID_COROUTINES_REFINED_STATE Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field INVALID_COROUTINES_STATE Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field INVALID_COROUTINE_SCOPE Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field REDUNDANT_PRIVATE_COROUTINES Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field REDUNDANT_PRIVATE_COROUTINES_IGNORE Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field REDUNDANT_PRIVATE_COROUTINES_REFINED Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field REDUNDANT_PRIVATE_COROUTINES_REFINED_STATE Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field REDUNDANT_PRIVATE_COROUTINES_STATE Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
	public static final field UNSUPPORTED_CLASS_EXTENSION_PROPERTY Lorg/jetbrains/kotlin/diagnostics/DiagnosticFactory0;
}

public abstract class com/rickclephas/kmp/nativecoroutines/compiler/config/ConfigListOption : org/jetbrains/kotlin/compiler/plugin/AbstractCliOption {
	public fun <init> (Ljava/lang/String;)V
	public final fun getAllowMultipleOccurrences ()Z
	public final fun getConfigKey ()Lorg/jetbrains/kotlin/config/CompilerConfigurationKey;
	public final fun getOptionName ()Ljava/lang/String;
	public fun getRequired ()Z
	public abstract fun parse (Ljava/lang/String;)Ljava/lang/Object;
}

public abstract class com/rickclephas/kmp/nativecoroutines/compiler/config/ConfigOption : org/jetbrains/kotlin/compiler/plugin/AbstractCliOption {
	public fun <init> (Ljava/lang/String;)V
	public final fun getAllowMultipleOccurrences ()Z
	public final fun getConfigKey ()Lorg/jetbrains/kotlin/config/CompilerConfigurationKey;
	public final fun getOptionName ()Ljava/lang/String;
	public fun getRequired ()Z
	public abstract fun parse (Ljava/lang/String;)Ljava/lang/Object;
}

public abstract class com/rickclephas/kmp/nativecoroutines/compiler/config/ConfigOptionWithDefault : com/rickclephas/kmp/nativecoroutines/compiler/config/ConfigOption {
	public fun <init> (Ljava/lang/String;)V
	public abstract fun getDefaultValue ()Ljava/lang/Object;
}

public final class com/rickclephas/kmp/nativecoroutines/compiler/config/ExposedSeverity : java/lang/Enum {
	public static final field ERROR Lcom/rickclephas/kmp/nativecoroutines/compiler/config/ExposedSeverity;
	public static final field NONE Lcom/rickclephas/kmp/nativecoroutines/compiler/config/ExposedSeverity;
	public static final field WARNING Lcom/rickclephas/kmp/nativecoroutines/compiler/config/ExposedSeverity;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lcom/rickclephas/kmp/nativecoroutines/compiler/config/ExposedSeverity;
	public static fun values ()[Lcom/rickclephas/kmp/nativecoroutines/compiler/config/ExposedSeverity;
}

public final class com/rickclephas/kmp/nativecoroutines/compiler/config/ExposedSeverityKt {
	public static final fun getEXPOSED_SEVERITY ()Lcom/rickclephas/kmp/nativecoroutines/compiler/config/ConfigOptionWithDefault;
}

public final class com/rickclephas/kmp/nativecoroutines/compiler/config/GeneratedSourceDirKt {
	public static final fun getGENERATED_SOURCE_DIR ()Lcom/rickclephas/kmp/nativecoroutines/compiler/config/ConfigListOption;
}

public final class com/rickclephas/kmp/nativecoroutines/compiler/config/K2ModeKt {
	public static final fun getK2_MODE ()Lcom/rickclephas/kmp/nativecoroutines/compiler/config/ConfigOptionWithDefault;
}

public final class com/rickclephas/kmp/nativecoroutines/compiler/config/SuffixesKt {
	public static final fun getFLOW_REPLAY_CACHE_SUFFIX ()Lcom/rickclephas/kmp/nativecoroutines/compiler/config/ConfigOption;
	public static final fun getFLOW_VALUE_SUFFIX ()Lcom/rickclephas/kmp/nativecoroutines/compiler/config/ConfigOption;
	public static final fun getSTATE_FLOW_SUFFIX ()Lcom/rickclephas/kmp/nativecoroutines/compiler/config/ConfigOption;
	public static final fun getSTATE_SUFFIX ()Lcom/rickclephas/kmp/nativecoroutines/compiler/config/ConfigOptionWithDefault;
	public static final fun getSUFFIX ()Lcom/rickclephas/kmp/nativecoroutines/compiler/config/ConfigOptionWithDefault;
}

public final class com/rickclephas/kmp/nativecoroutines/compiler/fir/diagnostics/FirKmpNativeCoroutinesErrors {
	public static final field INSTANCE Lcom/rickclephas/kmp/nativecoroutines/compiler/fir/diagnostics/FirKmpNativeCoroutinesErrors;
	public final fun getCONFLICT_COROUTINES ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getEXPOSED_FLOW_TYPE ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getEXPOSED_FLOW_TYPE_ERROR ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getEXPOSED_STATE_FLOW_PROPERTY ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getEXPOSED_STATE_FLOW_PROPERTY_ERROR ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getEXPOSED_SUSPEND_FUNCTION ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getEXPOSED_SUSPEND_FUNCTION_ERROR ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getIGNORED_COROUTINES ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getIGNORED_COROUTINES_REFINED ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getIGNORED_COROUTINES_REFINED_STATE ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getIGNORED_COROUTINES_STATE ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getIMPLICIT_RETURN_TYPE ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getINCOMPATIBLE_ACTUAL_COROUTINES ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getINCOMPATIBLE_ACTUAL_COROUTINES_IGNORE ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getINCOMPATIBLE_ACTUAL_COROUTINES_REFINED ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getINCOMPATIBLE_ACTUAL_COROUTINES_REFINED_STATE ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getINCOMPATIBLE_ACTUAL_COROUTINES_STATE ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getINCOMPATIBLE_OVERRIDE_COROUTINES ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getINCOMPATIBLE_OVERRIDE_COROUTINES_IGNORE ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getINCOMPATIBLE_OVERRIDE_COROUTINES_REFINED ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getINCOMPATIBLE_OVERRIDE_COROUTINES_REFINED_STATE ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getINCOMPATIBLE_OVERRIDE_COROUTINES_STATE ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getINVALID_COROUTINES ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getINVALID_COROUTINES_IGNORE ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getINVALID_COROUTINES_REFINED ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getINVALID_COROUTINES_REFINED_STATE ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getINVALID_COROUTINES_STATE ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getINVALID_COROUTINE_SCOPE ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getREDUNDANT_PRIVATE_COROUTINES ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getREDUNDANT_PRIVATE_COROUTINES_IGNORE ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getREDUNDANT_PRIVATE_COROUTINES_REFINED ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getREDUNDANT_PRIVATE_COROUTINES_REFINED_STATE ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getREDUNDANT_PRIVATE_COROUTINES_STATE ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getUNSUPPORTED_CLASS_EXTENSION_PROPERTY ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
}

public final class com/rickclephas/kmp/nativecoroutines/compiler/utils/NativeCoroutinesAnnotation : java/lang/Enum {
	public static final field Companion Lcom/rickclephas/kmp/nativecoroutines/compiler/utils/NativeCoroutinesAnnotation$Companion;
	public static final field NativeCoroutineScope Lcom/rickclephas/kmp/nativecoroutines/compiler/utils/NativeCoroutinesAnnotation;
	public static final field NativeCoroutines Lcom/rickclephas/kmp/nativecoroutines/compiler/utils/NativeCoroutinesAnnotation;
	public static final field NativeCoroutinesIgnore Lcom/rickclephas/kmp/nativecoroutines/compiler/utils/NativeCoroutinesAnnotation;
	public static final field NativeCoroutinesRefined Lcom/rickclephas/kmp/nativecoroutines/compiler/utils/NativeCoroutinesAnnotation;
	public static final field NativeCoroutinesRefinedState Lcom/rickclephas/kmp/nativecoroutines/compiler/utils/NativeCoroutinesAnnotation;
	public static final field NativeCoroutinesState Lcom/rickclephas/kmp/nativecoroutines/compiler/utils/NativeCoroutinesAnnotation;
	public final fun getClassId ()Lorg/jetbrains/kotlin/name/ClassId;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public final fun getFqName ()Lorg/jetbrains/kotlin/name/FqName;
	public static fun valueOf (Ljava/lang/String;)Lcom/rickclephas/kmp/nativecoroutines/compiler/utils/NativeCoroutinesAnnotation;
	public static fun values ()[Lcom/rickclephas/kmp/nativecoroutines/compiler/utils/NativeCoroutinesAnnotation;
}

public final class com/rickclephas/kmp/nativecoroutines/compiler/utils/NativeCoroutinesAnnotation$Companion {
	public final fun forClassId (Lorg/jetbrains/kotlin/name/ClassId;)Lcom/rickclephas/kmp/nativecoroutines/compiler/utils/NativeCoroutinesAnnotation;
	public final fun forFqName (Lorg/jetbrains/kotlin/name/FqName;)Lcom/rickclephas/kmp/nativecoroutines/compiler/utils/NativeCoroutinesAnnotation;
}

public final class com/rickclephas/kmp/nativecoroutines/compiler/utils/NativeCoroutinesAnnotationKt {
	public static final fun getShouldRefineInSwift (Lcom/rickclephas/kmp/nativecoroutines/compiler/utils/NativeCoroutinesAnnotation;)Z
}

